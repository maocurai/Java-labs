public class HeapSort {

    //кількість не відсортованих елементів
    private static int heapSize;

    /*відбувається перерозподіл елементів в результаті
      якого на вершині дерева опиняється максимальний елемент в кучі,
      потім він міняється місцями з останнім елеметом кучі,
      розмір кучі зменшується і процес повторюється, доки не залишиться 1 елемент*/

    public static void sort(int[] a) {
        makeHeap(a);   //створюється куча
        while (heapSize > 1) {
            swap(a, 0, heapSize - 1);
            heapSize--;
            heapify(a, 0);
        }
    }

    /*метод створює кучу, елементи після a.length / 2+1 дочірні, елементи до батьківські*/

    private static void makeHeap(int[] a) {
        heapSize = a.length;
        for (int i = a.length / 2; i >= 0; i--) {
            heapify(a, i);
        }
    }

    /*метод перерозподіляє елемети у піддереві за принципом: дочінні елементи менші або рівні батьківським*/

    private static void heapify(int[] a, int i) {
        int l = 2 * i + 1;   //індекс лівого елемента за формулою
        int r = 2 * i + 2;  //індекс правого елемента за формулою
        int max = i;        //індекс елеманта за максимальним значенням
        if (l < heapSize && a[i] < a[l]) {  //пошук максимального елемента
            max = l;
        }
        if (r < heapSize && a[max] < a[r]) {
            max = r;
        }
        if (i != max) {    //якщо корінь підерева не є максимальним елементом то міняємо корінь
            swap(a, i, max);
            heapify(a, max);   //повторюється перерозподіл для нового кореня
        }
    }

    //метод для перестановки місцями елементів по їх індексам
    private static void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}
